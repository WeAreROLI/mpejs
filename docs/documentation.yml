toc:
  - name: Introduction
    description:
      "[MPE](#MPE) (Multidimensional Polyphonic Expression) is a widely adopted
      iteration upon MIDI 1.0.\n\n

      By assigning conventional note on/off messages into “note channels”, the
      [MPE proposed
      standard](https://docs.google.com/document/d/1vpjxoPHw82X3xyNvE6_hsDeL86vloNQZC83NHD8edow/edit)
      enables continuous control parameters to be attached to individual active
      notes. These parameters can be used to represent, for example, continuous
      per-note pitch bend, pressure and timbre.\n\n
      The working group is supported by, among others, ROLI, Apple, Bitwig,
      Moog, Haken and Roger Linn Design. It is currently implemented in ROLI's
      Equator and NOISE software synthesizers, as well as Logic X, Bitwig Studio
      and Cubase.\n\n

      A C++ implementation is also available, included in
      [JUCE](https://juce.com)."

  - name: MPE developer toolkit
    description:
      "The included [`mpeInstrument`](#mpeInstrument) function, returns an Object
      representing an instrument supporting MPE.\n\n

      You can trigger and modulate notes using the
      [`processMidiMessage`](#mpeInstrument#processMidiMessage) method.
      [`processMidiMessage`](#mpeInstrument#processMidiMessage) implements the
      channel and note management logic specified in MPE. If you pass it a
      message, it will know what notes on what channels (if any) should be
      affected by that message.\n\n

      The instruments current playing notes can be accessed via the
      [`activeNotes`](#mpeInstrument#activeNotes) method at any given time.\n\n

      A [`subscribe`](#mpeInstrument#subscribe) method is also provided,
      allowing callbacks to be registered to listen for note changes."

  - mpeInstrument

  - name: Other utilities
    description:
      "Alongside, offering JavaScript support for [MPE MIDI](#MPE), the library
      bundles utilities designed to ease the process of building music web
      apps."

  - recorder
