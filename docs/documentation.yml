toc:
  - name: Installation
    description:
      "To install the latest version of [mpe.js](/):
      <pre class='p1'>npm install --save mpe</pre>\n\n

      [mpe.js](/) is open source and [available on GitHub](https://github.com/weareroli/mpejs)."

  - name: Quick start
    description:
      "[mpe.js](/) is flexible to different styles of usage.

      * ES2015 module (recommended):
      <pre class='p1 mb1'>import mpeInstrument from 'mpe';</pre>

      * CommonJS module:
      <pre class='p1 mb1'>var mpeInstrument = require('mpe');</pre>

      * Script tag:
      <pre class='p1 mb1'>&lt;script src='path/to/mpe/lib/mpe.min.js'>&lt;/script></pre>

      * Script tag from CDN:
      <pre class='p1 mb1'>&lt;script src='//unpkg.com/mpe/lib/mpe.js'>&lt;/script></pre>


      <small>*Note*: Using `lib/mpe.js` or `lib/mpe.min.js` via a script tag will assign
      module contents to `window.mpe`.</small>"

  - name: API

  - mpeInstrument

  - name: What is MPE?
    description:
      "MPE (Multidimensional Polyphonic Expression) is an extension of
      MIDI 1.0.\n\n

      MPE MIDI is designed to allow notes to have independent pitch bend,
      pressure and timbre values. Using previous MIDI these would commonly be
      set globally.\n\n

      Instruments following the [MPE proposed specification](https://docs.google.com/document/d/1vpjxoPHw82X3xyNvE6_hsDeL86vloNQZC83NHD8edow/edit)
      assign conventional note on/off messages into “note channels”. ROLI’s
      Seaboard and BLOCKS controllers, the Haken Continuum and the Linnstrument
      all follow this one note per channel convention.\n\n

      The MPE working group is supported by ROLI, Apple, Bitwig, Moog, Haken and
      Roger Linn Design. MPE is currently implemented in ROLI’s Equator and
      NOISE software synths, as well as Logic X, Bitwig Studio and Cubase.\n\n

      A C++ implementation is also available included in [JUCE](https://juce.com)."
