toc:
  - name: Installation
    description:
      "To install the latest version of [mpe.js](/):
      <pre class='p1 mb1'>npm install --save mpe</pre>\n

      To use without a package manager:
      <pre class='p1 mb1'>&lt;script src='//unpkg.com/mpe@{PACKAGE_JSON_VERSION}/lib/mpe.min.js'>&lt;/script></pre>"

  - name: Quick start
    description:
      "
      Once installed from npm, [mpe.js](/) can be used in any of these ways.

      * ES2015 module (recommended)
      <pre class='p1 mb1'>import mpeInstrument from 'mpe';</pre>

      * CommonJS module
      <pre class='p1 mb1'>var mpeInstrument = require('mpe');</pre>

      * Script tag
      <pre class='p1 mb1'>&lt;script src='path/to/mpe/lib/mpe.min.js'>&lt;/script></pre>

      <small>*Note*: Using `lib/mpe.min.js` or `lib/mpe.min.js` via a script tag will assign
      module contents to `window.mpe`.</small>"

  - name: API

  - mpeInstrument

  - name: FAQs
    description:
      "
      ### What is MPE?\n\n

      MPE stands for “MIDI Polyphonic Expression” and is an extension of MIDI
      1.0.\n\n

      MPE allows individual notes to have independent pitch bend values where
      MIDI 1.0 only allows these to be set globally for an entire instrument.\n\n

      Instruments following the [MPE proposed specification](https://docs.google.com/document/d/1vpjxoPHw82X3xyNvE6_hsDeL86vloNQZC83NHD8edow/edit)
      assign conventional note on/off messages into “note channels”. ROLI’s
      Seaboard and BLOCKS controllers, the Haken Continuum and the Linnstrument
      all follow this one note per channel convention.\n\n

      The MPE working group is supported by ROLI, Apple, Bitwig, Moog, Haken and
      Roger Linn Design. MPE is currently implemented in Logic X, Bitwig Studio
      and Cubase, as well as ROLI’s Equator and NOISE software synths.\n\n

      ### Do I have to use this with the Web MIDI API?\n\n

      No.\n\n

      mpe.js can be used to simplify reading recorded MPE data in the browser
      without depending on [Web MIDI API](https://webaudio.github.io/web-midi-api/)
      for live input. It can also be used in node.js, either for offline usage,
      or processing live input via I/O libraries such as
      [node-midi](https://github.com/justinlatimer/node-midi).

      ### Are there tools to use MPE in other programming languages?\n\n

      Yes! A C++ implementation is included in [JUCE](https://juce.com).\n\n
      "
