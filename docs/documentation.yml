toc:
  - name: Installation
    description:
      "To install the latest version of [mpe.js](/):
      <pre class='p1'>npm install --save mpe</pre>\n\n

      [mpe.js](/) is open source and [available on GitHub](https://github.com/weareroli/mpejs)."

  - name: Quick start
    description:
      "[mpe.js](/) is flexible to different styles of usage.

      * [ES2015 module](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import)
      (recommended):
      <pre class='p1 mb1'>import mpeInstrument from 'mpe';</pre>

      * CommonJS module:
      <pre class='p1 mb1'>var mpeInstrument = require('mpe');</pre>

      * Script tag:
      <pre class='p1 mb1'>&lt;script src='path/to/mpe/lib/mpe.min.js' /></pre>

      * Script tag from CDN:
      <pre class='p1 mb1'>&lt;script src='//unpkg.com/mpe/lib/mpe.js' /></pre>


      <small>*Note*: Using `lib/mpe.js` or `lib/mpe.min.js` via a script tag will assign
      module contents to `window.mpe`.</small>"

  - name: API

  - mpeInstrument

  - name: What is MPE?
    description:
      "[MPE](#MPE) (Multidimensional Polyphonic Expression) is a widely adopted
      iteration upon MIDI 1.0.\n\n

      By assigning conventional note on/off messages into “note channels”, the
      [MPE proposed
      specification](https://docs.google.com/document/d/1vpjxoPHw82X3xyNvE6_hsDeL86vloNQZC83NHD8edow/edit)
      enables continuous control parameters to be attached to individual active
      notes. These parameters can be used to represent continuously changing
      per-note pitch bend, pressure and timbre.\n\n

      The working group is supported by ROLI, Apple, Bitwig, Moog, Haken and
      Roger Linn Design. It is currently implemented in ROLI’s Equator and NOISE
      software synthesizers, as well as Logic X, Bitwig Studio and Cubase.\n\n

      A C++ implementation is also available, included in
      [JUCE](https://juce.com)."
